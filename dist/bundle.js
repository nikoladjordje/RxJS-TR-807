(()=>{"use strict";var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};function n(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function e(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(e=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=n.call(t,u)}catch(t){c=[6,t],r=0}finally{e=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function r(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function i(t,n,e){if(e||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function s(t){return"function"==typeof t}function a(t){return s(null==t?void 0:t.then)}function l(t){var n=t((function(t){Error.call(t),t.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var f=l((function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function d(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var p=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return t.prototype.unsubscribe=function(){var t,n,e,u,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=r(a),d=l.next();!d.done;d=l.next())d.value.remove(this)}catch(n){t={error:n}}finally{try{d&&!d.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}else a.remove(this);var p=this.initialTeardown;if(s(p))try{p()}catch(t){c=t instanceof f?t.errors:[t]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var v=r(h),b=v.next();!b.done;b=v.next()){var m=b.value;try{y(m)}catch(t){c=null!=c?c:[],t instanceof f?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){e={error:t}}finally{try{b&&!b.done&&(u=v.return)&&u.call(v)}finally{if(e)throw e.error}}}if(c)throw new f(c)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)y(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&d(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&d(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}(),h=p.EMPTY;function v(t){return t instanceof p||t&&"closed"in t&&s(t.remove)&&s(t.add)&&s(t.unsubscribe)}function y(t){s(t)?t():t.unsubscribe()}var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var u=m.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([t,n],o(e))):setTimeout.apply(void 0,i([t,n],o(e)))},clearTimeout:function(t){var n=m.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function w(t){m.setTimeout((function(){var n=b.onUnhandledError;if(!n)throw t;n(t)}))}function g(){}var S=x("C",void 0,void 0);function x(t,n,e){return{kind:t,value:n,error:e}}var _=null;function E(t){if(b.useDeprecatedSynchronousErrorHandling){var n=!_;if(n&&(_={errorThrown:!1,error:null}),t(),n){var e=_,r=e.errorThrown,o=e.error;if(_=null,r)throw o}}else t()}var k=function(t){function e(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,v(n)&&n.add(e)):e.destination=P,e}return n(e,t),e.create=function(t,n,e){return new A(t,n,e)},e.prototype.next=function(t){this.isStopped?L(function(t){return x("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?L(x("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?L(S,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(p),I=Function.prototype.bind;function C(t,n){return I.call(t,n)}var T=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){O(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){O(t)}else O(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){O(t)}},t}(),A=function(t){function e(n,e,r){var o,i,u=t.call(this)||this;return s(n)||!n?o={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&b.useDeprecatedNextContext?((i=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},o={next:n.next&&C(n.next,i),error:n.error&&C(n.error,i),complete:n.complete&&C(n.complete,i)}):o=n,u.destination=new T(o),u}return n(e,t),e}(k);function O(t){var n;b.useDeprecatedSynchronousErrorHandling?(n=t,b.useDeprecatedSynchronousErrorHandling&&_&&(_.errorThrown=!0,_.error=n)):w(t)}function L(t,n){var e=b.onStoppedNotification;e&&m.setTimeout((function(){return e(t,n)}))}var P={closed:!0,next:g,error:function(t){throw t},complete:g},U="function"==typeof Symbol&&Symbol.observable||"@@observable";function j(t){return t}var q=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=this,i=(r=t)&&r instanceof k||function(t){return t&&s(t.next)&&s(t.error)&&s(t.complete)}(r)&&v(r)?t:new A(t,n,e);return E((function(){var t=o,n=t.operator,e=t.source;i.add(n?n.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=z(n))((function(n,r){var o=new A({next:function(n){try{t(n)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n});e.subscribe(o)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[U]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(0===(e=t).length?j:1===e.length?e[0]:function(t){return e.reduce((function(t,n){return n(t)}),t)})(this);var e},t.prototype.toPromise=function(t){var n=this;return new(t=z(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function z(t){var n;return null!==(n=null!=t?t:b.Promise)&&void 0!==n?n:Promise}function D(t){return s(t[U])}function N(t){return Symbol.asyncIterator&&s(null==t?void 0:t[Symbol.asyncIterator])}function F(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var H="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function M(t){return s(null==t?void 0:t[H])}function R(t){return function(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){o[t]&&(r[t]=function(n){return new Promise((function(e,r){i.push([t,n,e,r])>1||s(t,n)}))})}function s(t,n){try{(e=o[t](n)).value instanceof u?Promise.resolve(e.value.v).then(a,l):f(i[0][2],e)}catch(t){f(i[0][3],t)}var e}function a(t){s("next",t)}function l(t){s("throw",t)}function f(t,n){t(n),i.shift(),i.length&&s(i[0][0],i[0][1])}}(this,arguments,(function(){var n,r,o;return e(this,(function(e){switch(e.label){case 0:n=t.getReader(),e.label=1;case 1:e.trys.push([1,,9,10]),e.label=2;case 2:return[4,u(n.read())];case 3:return r=e.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,e.sent()];case 5:return[4,u(o)];case 6:return[4,e.sent()];case 7:return e.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function Y(t){return s(null==t?void 0:t.getReader)}function G(t){if(t instanceof q)return t;if(null!=t){if(D(t))return i=t,new q((function(t){var n=i[U]();if(s(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(t))return o=t,new q((function(t){for(var n=0;n<o.length&&!t.closed;n++)t.next(o[n]);t.complete()}));if(a(t))return e=t,new q((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,w)}));if(N(t))return Q(t);if(M(t))return n=t,new q((function(t){var e,o;try{for(var i=r(n),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}t.complete()}));if(Y(t))return Q(R(t))}var n,e,o,i;throw F(t)}function Q(t){return new q((function(n){(function(t,n){var o,i,u,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return e(this,(function(e){switch(e.label){case 0:e.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=r(t),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,o,(n=t[e](n)).done,n.value)}))}}}(t),e.label=1;case 1:return[4,o.next()];case 2:if((i=e.sent()).done)return[3,4];if(s=i.value,n.next(s),n.closed)return[2];e.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=e.sent(),u={error:a},[3,11];case 6:return e.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:e.sent(),e.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{o(f.next(t))}catch(t){n(t)}}function r(t){try{o(f.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(e,r)}o((f=f.apply(s,a||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function V(t){return function(n){if(function(t){return s(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function W(t,n,e,r,o){return new X(t,n,e,r,o)}var X=function(t){function e(n,e,r,o,i,u){var c=t.call(this,n)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return n(e,t),e.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},e}(k);function Z(t,n){return V((function(e,r){var o=0;e.subscribe(W(r,(function(e){r.next(t.call(n,e,o++))})))}))}function B(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=n.schedule((function(){e(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function J(t,n,e){return void 0===e&&(e=1/0),s(n)?J((function(e,r){return Z((function(t,o){return n(e,t,r,o)}))(G(t(e,r)))}),e):("number"==typeof n&&(e=n),V((function(n,r){return function(t,n,e,r,o,i,u,c){var s=[],a=0,l=0,f=!1,d=function(){!f||s.length||a||n.complete()},p=function(t){return a<r?h(t):s.push(t)},h=function(t){a++;var o=!1;G(e(t,l++)).subscribe(W(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)t=void 0,t=s.shift(),h(t);d()}catch(t){n.error(t)}var t})))};return t.subscribe(W(n,p,(function(){f=!0,d()}))),function(){}}(n,r,t,e)})))}var K=Array.isArray;var $=["addListener","removeListener"],tt=["addEventListener","removeEventListener"],nt=["on","off"];function et(t,n,e,r){if(s(e)&&(r=e,e=void 0),r)return et(t,n,e).pipe((u=r,Z((function(t){return function(t,n){return K(n)?t.apply(void 0,i([],o(n))):t(n)}(u,t)}))));var u,a=o(function(t){return s(t.addEventListener)&&s(t.removeEventListener)}(t)?tt.map((function(r){return function(o){return t[r](n,o,e)}})):function(t){return s(t.addListener)&&s(t.removeListener)}(t)?$.map(rt(t,n)):function(t){return s(t.on)&&s(t.off)}(t)?nt.map(rt(t,n)):[],2),l=a[0],f=a[1];if(!l&&c(t))return J((function(t){return et(t,n,e)}))(G(t));if(!l)throw new TypeError("Invalid event target");return new q((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return l(n),function(){return f(n)}}))}function rt(t,n){return function(e){return function(r){return t[e](n,r)}}}function ot(t,n){return V((function(e,r){var o=0;e.subscribe(W(r,(function(e){return t.call(n,e,o++)&&r.next(e)})))}))}var it=l((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),ut=function(t){function e(){var n=t.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return n(e,t),e.prototype.lift=function(t){var n=new ct(this,this);return n.operator=t,n},e.prototype._throwIfClosed=function(){if(this.closed)throw new it},e.prototype.next=function(t){var n=this;E((function(){var e,o;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var i=r(n.currentObservers),u=i.next();!u.done;u=i.next())u.value.next(t)}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}}}))},e.prototype.error=function(t){var n=this;E((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=t;for(var e=n.observers;e.length;)e.shift().error(t)}}))},e.prototype.complete=function(){var t=this;E((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var n=t.observers;n.length;)n.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(n){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,n)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var n=this,e=this,r=e.hasError,o=e.isStopped,i=e.observers;return r||o?h:(this.currentObservers=null,i.push(t),new p((function(){n.currentObservers=null,d(i,t)})))},e.prototype._checkFinalizedStatuses=function(t){var n=this,e=n.hasError,r=n.thrownError,o=n.isStopped;e?t.error(r):o&&t.complete()},e.prototype.asObservable=function(){var t=new q;return t.source=this,t},e.create=function(t,n){return new ct(t,n)},e}(q),ct=function(t){function e(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return n(e,t),e.prototype.next=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===e||e.call(n,t)},e.prototype.error=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===e||e.call(n,t)},e.prototype.complete=function(){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===n||n.call(t)},e.prototype._subscribe=function(t){var n,e;return null!==(e=null===(n=this.source)||void 0===n?void 0:n.subscribe(t))&&void 0!==e?e:h},e}(ut),st=function(t){function e(n,e){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},e}(p),at={setInterval:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var u=at.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,i([t,n],o(e))):setInterval.apply(void 0,i([t,n],o(e)))},clearInterval:function(t){var n=at.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},lt=function(t){function e(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return n(e,t),e.prototype.schedule=function(t,n){var e;if(void 0===n&&(n=0),this.closed)return this;this.state=t;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,n)),this.pending=!0,this.delay=n,this.id=null!==(e=this.id)&&void 0!==e?e:this.requestAsyncId(o,this.id,n),this},e.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),at.setInterval(t.flush.bind(t,this),e)},e.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;null!=n&&at.clearInterval(n)},e.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,d(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(st),ft={now:function(){return(ft.delegate||Date).now()},delegate:void 0},dt=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=ft.now,t}(),pt=new(function(t){function e(n,e){void 0===e&&(e=dt.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r}return n(e,t),e.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},e}(dt))(lt),ht=pt;function vt(t){return t&&s(t.schedule)}function yt(t){return vt((n=t)[n.length-1])?t.pop():void 0;var n}function bt(t,n){return void 0===n&&(n=0),V((function(e,r){e.subscribe(W(r,(function(e){return B(r,t,(function(){return r.next(e)}),n)}),(function(){return B(r,t,(function(){return r.complete()}),n)}),(function(e){return B(r,t,(function(){return r.error(e)}),n)})))}))}function mt(t,n){return void 0===n&&(n=0),V((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function wt(t,n){if(!t)throw new Error("Iterable cannot be null");return new q((function(e){B(e,n,(function(){var r=t[Symbol.asyncIterator]();B(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function gt(){for(var t,n,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return(void 0===(o=1)&&(o=1/0),J(j,o))((t=e,(n=yt(e))?function(t,n){if(null!=t){if(D(t))return function(t,n){return G(t).pipe(mt(n),bt(n))}(t,n);if(c(t))return function(t,n){return new q((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if(a(t))return function(t,n){return G(t).pipe(mt(n),bt(n))}(t,n);if(N(t))return wt(t,n);if(M(t))return function(t,n){return new q((function(e){var r;return B(e,n,(function(){r=t[H](),B(e,n,(function(){var t,n,o;try{n=(t=r.next()).value,o=t.done}catch(t){return void e.error(t)}o?e.complete():e.next(n)}),0,!0)})),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(t,n);if(Y(t))return function(t,n){return wt(R(t),n)}(t,n)}throw F(t)}(t,n):G(t)));var o}var St=new Array(16).fill(!1),xt=new ut;xt.asObservable().subscribe((function(t){console.log("Step ".concat(t+1," was clicked.")),console.log(St)})),function(){var t=[];function n(n){var e,r=null===(e=t.find((function(t){return t.id===n})))||void 0===e?void 0:e.audio;r&&(r.currentTime=0,r.play())}var e=document.createElement("div");e.classList.add("mpc-container"),document.querySelector(".main").appendChild(e),fetch("http://localhost:3000/sounds").then((function(t){return t.json()})).then((function(r){t.push.apply(t,r.map((function(t){return{id:t.id,audio:(n="/assets/sounds/".concat(t.soundPath),e=new Audio(n),e.preload="auto",e)};var n,e})));for(var o=function(t){var r=document.createElement("div");r.classList.add("drum-pad"),r.textContent=t.name,r.addEventListener("click",(function(){return n(t.id)})),e.appendChild(r)},i=0,u=r;i<u.length;i++)o(u[i])})).catch((function(t){console.error("Error fetching data from the server:",t)})),console.log(t),et(document,"keydown").pipe(ot((function(t){return"Q"===t.key.toUpperCase()})),Z((function(){return 9}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"W"===t.key.toUpperCase()})),Z((function(){return 10}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"E"===t.key.toUpperCase()})),Z((function(){return 11}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"R"===t.key.toUpperCase()})),Z((function(){return 12}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"A"===t.key.toUpperCase()})),Z((function(){return 5}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"S"===t.key.toUpperCase()})),Z((function(){return 6}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"D"===t.key.toUpperCase()})),Z((function(){return 7}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"F"===t.key.toUpperCase()})),Z((function(){return 8}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"Z"===t.key.toUpperCase()})),Z((function(){return 1}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"X"===t.key.toUpperCase()})),Z((function(){return 2}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"C"===t.key.toUpperCase()})),Z((function(){return 3}))).subscribe((function(t){n(t)})),et(document,"keydown").pipe(ot((function(t){return"V"===t.key.toUpperCase()})),Z((function(){return 4}))).subscribe((function(t){n(t)}))}(),function(){var t=document.createElement("button");t.classList.add("start-btn"),t.innerHTML="Start",document.querySelector(".main").appendChild(t);var n=document.createElement("button");n.classList.add("stop-btn"),n.innerHTML="Stop",document.querySelector(".main").appendChild(n);var e,r,o,i=et(t,"click"),u=et(n,"click"),c=(void 0===(e=100)&&(e=0),void 0===r&&(r=pt),e<0&&(e=0),function(t,n,e){void 0===t&&(t=0),void 0===e&&(e=ht);var r=-1;return null!=n&&(vt(n)?e=n:r=n),new q((function(n){var o,i=(o=t)instanceof Date&&!isNaN(o)?+t-e.now():t;i<0&&(i=0);var u=0;return e.schedule((function(){n.closed||(n.next(u++),0<=r?this.schedule(void 0,r):n.complete())}),i)}))}(e,e,r));i.pipe((o=function(){return c.pipe(function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=yt(t);return V((function(n,r){(e?gt(t,n,e):gt(t,n)).subscribe(r)}))}(-1),function(t,n){return V(function(t,n,e,r,o){return function(r,o){var i=e,u=n,c=0;r.subscribe(W(o,(function(n){var e=c++;u=i?t(u,n,e):(i=!0,n),o.next(u)}),void 0))}}(t,n,arguments.length>=2))}((function(t){return(t+1)%16}),-1),(t=u,V((function(n,e){G(t).subscribe(W(e,(function(){return e.complete()}),g)),!e.closed&&n.subscribe(e)}))));var t},V((function(t,n){var e=null,r=!1,i=function(){return r&&!e&&n.complete()};t.subscribe(W(n,(function(t){null==e||e.unsubscribe();0;G(o()).subscribe(e=W(n,(function(t){return n.next(t)}),(function(){e=null,i()})))}),(function(){r=!0,i()})))})))).subscribe((function(t){var n,e;console.log("Interval value: ".concat(t)),St[t]&&(6,(e=null===(n=a.find((function(t){return 6===t.id})))||void 0===n?void 0:n.audio)&&(e.currentTime=0,e.play()))}),null,(function(){console.log("Interval stopped.")}));var s=document.createElement("div");s.classList.add("seq-container"),document.querySelector(".main").appendChild(s);var a=[];fetch("http://localhost:3000/sounds").then((function(t){return t.json()})).then((function(t){a.push.apply(a,t.map((function(t){return{id:t.id,audio:(n="/assets/sounds/".concat(t.soundPath),e=new Audio(n),e.preload="auto",e)};var n,e})))})).catch((function(t){console.error("Error fetching data from the server:",t)})),console.log(a);for(var l=function(t){var n=document.createElement("div");n.classList.add("seq-pad");var e=document.createElement("div");e.classList.add("step"),e.classList.add("step-"+(t+1).toString()),t>=0&&t<4&&e.classList.add("first"),t>=4&&t<8&&e.classList.add("second"),t>=8&&t<12&&e.classList.add("third"),t>=12&&t<16&&e.classList.add("fourth"),e.textContent="-",n.appendChild(e);var r=document.createElement("div");r.textContent=(t+1).toString(),n.appendChild(r),s.appendChild(n),n.addEventListener("click",(function(){St[t]=!St[t],St[t]?document.querySelector(".step-"+(t+1).toString()).classList.add("step-selected"):document.querySelector(".step-"+(t+1).toString()).classList.remove("step-selected"),xt.next(t)}))},f=0;f<16;f++)l(f)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,