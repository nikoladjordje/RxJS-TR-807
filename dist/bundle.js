(()=>{"use strict";var n=function(t,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])},n(t,r)};function t(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=t}n(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}function r(n,t){var r,e,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(a){return function(c){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(r=1,e&&(o=2&c[0]?e.return:c[0]?e.throw||((o=e.return)&&o.call(e),0):e.next)&&!(o=o.call(e,c[1])).done)return o;switch(e=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,e=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(n,u)}catch(n){c=[6,n],e=0}finally{r=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function e(n){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&n[t],e=0;if(r)return r.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&e>=n.length&&(n=void 0),{value:n&&n[e++],done:!n}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(n,t){var r="function"==typeof Symbol&&n[Symbol.iterator];if(!r)return n;var e,o,i=r.call(n),u=[];try{for(;(void 0===t||t-- >0)&&!(e=i.next()).done;)u.push(e.value)}catch(n){o={error:n}}finally{try{e&&!e.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u}function i(n,t,r){if(r||2===arguments.length)for(var e,o=0,i=t.length;o<i;o++)!e&&o in t||(e||(e=Array.prototype.slice.call(t,0,o)),e[o]=t[o]);return n.concat(e||Array.prototype.slice.call(t))}function u(n){return this instanceof u?(this.v=n,this):new u(n)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function a(n){return"function"==typeof n}var s,l=((s=function(n){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(n,t){return t+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}).prototype=Object.create(Error.prototype),s.prototype.constructor=s,s);function f(n,t){if(n){var r=n.indexOf(t);0<=r&&n.splice(r,1)}}var p=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return n.prototype.unsubscribe=function(){var n,t,r,u,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var f=e(s),p=f.next();!p.done;p=f.next())p.value.remove(this)}catch(t){n={error:t}}finally{try{p&&!p.done&&(t=f.return)&&t.call(f)}finally{if(n)throw n.error}}else s.remove(this);var d=this.initialTeardown;if(a(d))try{d()}catch(n){c=n instanceof l?n.errors:[n]}var y=this._finalizers;if(y){this._finalizers=null;try{for(var v=e(y),b=v.next();!b.done;b=v.next()){var m=b.value;try{h(m)}catch(n){c=null!=c?c:[],n instanceof l?c=i(i([],o(c)),o(n.errors)):c.push(n)}}}catch(n){r={error:n}}finally{try{b&&!b.done&&(u=v.return)&&u.call(v)}finally{if(r)throw r.error}}}if(c)throw new l(c)}},n.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)h(t);else{if(t instanceof n){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},n.prototype._hasParent=function(n){var t=this._parentage;return t===n||Array.isArray(t)&&t.includes(n)},n.prototype._addParent=function(n){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(n),t):t?[t,n]:n},n.prototype._removeParent=function(n){var t=this._parentage;t===n?this._parentage=null:Array.isArray(t)&&f(t,n)},n.prototype.remove=function(t){var r=this._finalizers;r&&f(r,t),t instanceof n&&t._removeParent(this)},n.EMPTY=((t=new n).closed=!0,t),n}();function d(n){return n instanceof p||n&&"closed"in n&&a(n.remove)&&a(n.add)&&a(n.unsubscribe)}function h(n){a(n)?n():n.unsubscribe()}p.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},v={setTimeout:function(n,t){for(var r=[],e=2;e<arguments.length;e++)r[e-2]=arguments[e];var u=v.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([n,t],o(r))):setTimeout.apply(void 0,i([n,t],o(r)))},clearTimeout:function(n){var t=v.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(n)},delegate:void 0};function b(n){v.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw n;t(n)}))}function m(){}var w=x("C",void 0,void 0);function x(n,t,r){return{kind:n,value:t,error:r}}var S=null,g=function(n){function r(t){var r=n.call(this)||this;return r.isStopped=!1,t?(r.destination=t,d(t)&&t.add(r)):r.destination=L,r}return t(r,n),r.create=function(n,t,r){return new C(n,t,r)},r.prototype.next=function(n){this.isStopped?P(function(n){return x("N",n,void 0)}(n),this):this._next(n)},r.prototype.error=function(n){this.isStopped?P(x("E",void 0,n),this):(this.isStopped=!0,this._error(n))},r.prototype.complete=function(){this.isStopped?P(w,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(n){this.destination.next(n)},r.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(p),_=Function.prototype.bind;function E(n,t){return _.call(n,t)}var k=function(){function n(n){this.partialObserver=n}return n.prototype.next=function(n){var t=this.partialObserver;if(t.next)try{t.next(n)}catch(n){T(n)}},n.prototype.error=function(n){var t=this.partialObserver;if(t.error)try{t.error(n)}catch(n){T(n)}else T(n)},n.prototype.complete=function(){var n=this.partialObserver;if(n.complete)try{n.complete()}catch(n){T(n)}},n}(),C=function(n){function r(t,r,e){var o,i,u=n.call(this)||this;return a(t)||!t?o={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=e?e:void 0}:u&&y.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&E(t.next,i),error:t.error&&E(t.error,i),complete:t.complete&&E(t.complete,i)}):o=t,u.destination=new k(o),u}return t(r,n),r}(g);function T(n){var t;y.useDeprecatedSynchronousErrorHandling?(t=n,y.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=t)):b(n)}function P(n,t){var r=y.onStoppedNotification;r&&v.setTimeout((function(){return r(n,t)}))}var L={closed:!0,next:m,error:function(n){throw n},complete:m},U="function"==typeof Symbol&&Symbol.observable||"@@observable";function A(n){return n}var O=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(t){var r=new n;return r.source=this,r.operator=t,r},n.prototype.subscribe=function(n,t,r){var e,o=this,i=(e=n)&&e instanceof g||function(n){return n&&a(n.next)&&a(n.error)&&a(n.complete)}(e)&&d(e)?n:new C(n,t,r);return function(n){if(y.useDeprecatedSynchronousErrorHandling){var t=!S;if(t&&(S={errorThrown:!1,error:null}),n(),t){var r=S,e=r.errorThrown,o=r.error;if(S=null,e)throw o}}else n()}((function(){var n=o,t=n.operator,r=n.source;i.add(t?t.call(i,r):r?o._subscribe(i):o._trySubscribe(i))})),i},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(t){n.error(t)}},n.prototype.forEach=function(n,t){var r=this;return new(t=j(t))((function(t,e){var o=new C({next:function(t){try{n(t)}catch(n){e(n),o.unsubscribe()}},error:e,complete:t});r.subscribe(o)}))},n.prototype._subscribe=function(n){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(n)},n.prototype[U]=function(){return this},n.prototype.pipe=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return(0===(r=n).length?A:1===r.length?r[0]:function(n){return r.reduce((function(n,t){return t(n)}),n)})(this);var r},n.prototype.toPromise=function(n){var t=this;return new(n=j(n))((function(n,r){var e;t.subscribe((function(n){return e=n}),(function(n){return r(n)}),(function(){return n(e)}))}))},n.create=function(t){return new n(t)},n}();function j(n){var t;return null!==(t=null!=n?n:y.Promise)&&void 0!==t?t:Promise}var I="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function z(n){if(n instanceof O)return n;if(null!=n){if(function(n){return a(n[U])}(n))return l=n,new O((function(n){var t=l[U]();if(a(t.subscribe))return t.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(n))return s=n,new O((function(n){for(var t=0;t<s.length&&!n.closed;t++)n.next(s[t]);n.complete()}));if(a(null==(i=n)?void 0:i.then))return o=n,new O((function(n){o.then((function(t){n.closed||(n.next(t),n.complete())}),(function(t){return n.error(t)})).then(null,b)}));if(function(n){return Symbol.asyncIterator&&a(null==n?void 0:n[Symbol.asyncIterator])}(n))return D(n);if(function(n){return a(null==n?void 0:n[I])}(n))return t=n,new O((function(n){var r,o;try{for(var i=e(t),u=i.next();!u.done;u=i.next()){var c=u.value;if(n.next(c),n.closed)return}}catch(n){r={error:n}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}n.complete()}));if(function(n){return a(null==n?void 0:n.getReader)}(n))return D(function(n){return function(n,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,o=r.apply(n,t||[]),i=[];return e={},c("next"),c("throw"),c("return"),e[Symbol.asyncIterator]=function(){return this},e;function c(n){o[n]&&(e[n]=function(t){return new Promise((function(r,e){i.push([n,t,r,e])>1||a(n,t)}))})}function a(n,t){try{(r=o[n](t)).value instanceof u?Promise.resolve(r.value.v).then(s,l):f(i[0][2],r)}catch(n){f(i[0][3],n)}var r}function s(n){a("next",n)}function l(n){a("throw",n)}function f(n,t){n(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}(this,arguments,(function(){var t,e,o;return r(this,(function(r){switch(r.label){case 0:t=n.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(t.read())];case 3:return e=r.sent(),o=e.value,e.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}(n))}var t,o,i,s,l;throw function(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(n)}function D(n){return new O((function(t){(function(n,t){var o,i,u,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),o=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=n[Symbol.asyncIterator];return r?r.call(n):(n=e(n),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(r){t[r]=n[r]&&function(t){return new Promise((function(e,o){!function(n,t,r,e){Promise.resolve(e).then((function(t){n({value:t,done:r})}),t)}(e,o,(t=n[r](t)).done,t.value)}))}}}(n),r.label=1;case 1:return[4,o.next()];case 2:if((i=r.sent()).done)return[3,4];if(a=i.value,t.next(a),t.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=r.sent(),u={error:s},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(n,t){function r(n){try{o(f.next(n))}catch(n){t(n)}}function e(n){try{o(f.throw(n))}catch(n){t(n)}}function o(t){var o;t.done?n(t.value):(o=t.value,o instanceof l?o:new l((function(n){n(o)}))).then(r,e)}o((f=f.apply(a,s||[])).next())}))})(n,t).catch((function(n){return t.error(n)}))}))}function N(n){return function(t){if(function(n){return a(null==n?void 0:n.lift)}(t))return t.lift((function(t){try{return n(t,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function q(n,t,r,e,o){return new F(n,t,r,e,o)}var F=function(n){function r(t,r,e,o,i,u){var c=n.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=r?function(n){try{r(n)}catch(n){t.error(n)}}:n.prototype._next,c._error=o?function(n){try{o(n)}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._error,c._complete=e?function(){try{e()}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,c}return t(r,n),r.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;n.prototype.unsubscribe.call(this),!r&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},r}(g);function H(n,t){return N((function(r,e){var o=0;r.subscribe(q(e,(function(r){e.next(n.call(t,r,o++))})))}))}function R(n,t,r){return void 0===r&&(r=1/0),a(t)?R((function(r,e){return H((function(n,o){return t(r,n,e,o)}))(z(n(r,e)))}),r):("number"==typeof t&&(r=t),N((function(t,e){return function(n,t,r,e,o,i,u,c){var a=[],s=0,l=0,f=!1,p=function(){!f||a.length||s||t.complete()},d=function(n){return s<e?h(n):a.push(n)},h=function(n){s++;var o=!1;z(r(n,l++)).subscribe(q(t,(function(n){t.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(var n=function(){var n=a.shift();h(n)};a.length&&s<e;)n();p()}catch(n){t.error(n)}})))};return n.subscribe(q(t,d,(function(){f=!0,p()}))),function(){}}(t,e,n,r)})))}var Y=Array.isArray;var M=["addListener","removeListener"],G=["addEventListener","removeEventListener"],Q=["on","off"];function V(n,t,r,e){if(a(r)&&(e=r,r=void 0),e)return V(n,t,r).pipe((u=e,H((function(n){return function(n,t){return Y(t)?n.apply(void 0,i([],o(t))):n(t)}(u,n)}))));var u,s=o(function(n){return a(n.addEventListener)&&a(n.removeEventListener)}(n)?G.map((function(e){return function(o){return n[e](t,o,r)}})):function(n){return a(n.addListener)&&a(n.removeListener)}(n)?M.map(W(n,t)):function(n){return a(n.on)&&a(n.off)}(n)?Q.map(W(n,t)):[],2),l=s[0],f=s[1];if(!l&&c(n))return R((function(n){return V(n,t,r)}))(z(n));if(!l)throw new TypeError("Invalid event target");return new O((function(n){var t=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return n.next(1<t.length?t:t[0])};return l(t),function(){return f(t)}}))}function W(n,t){return function(r){return function(e){return n[r](t,e)}}}function X(n,t){return N((function(r,e){var o=0;r.subscribe(q(e,(function(r){return n.call(t,r,o++)&&e.next(r)})))}))}!function(){var n=[];function t(t){var r,e=null===(r=n.find((function(n){return n.id===t})))||void 0===r?void 0:r.audio;e&&(e.currentTime=0,e.play())}var r=document.createElement("div");r.classList.add("mpc-container"),document.querySelector(".main").appendChild(r),fetch("http://localhost:3000/sounds").then((function(n){return n.json()})).then((function(e){n.push.apply(n,e.map((function(n){return{id:n.id,audio:(t="/assets/sounds/".concat(n.soundPath),r=new Audio(t),r.preload="auto",r)};var t,r})));for(var o=function(n){var e=document.createElement("div");e.classList.add("drum-pad"),e.textContent=n.name,e.addEventListener("click",(function(){return t(n.id)})),r.appendChild(e)},i=0,u=e;i<u.length;i++)o(u[i])})).catch((function(n){console.error("Error fetching data from the server:",n)})),console.log(n),V(document,"keydown").pipe(X((function(n){return"Q"===n.key.toUpperCase()})),H((function(){return 9}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"W"===n.key.toUpperCase()})),H((function(){return 10}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"E"===n.key.toUpperCase()})),H((function(){return 11}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"R"===n.key.toUpperCase()})),H((function(){return 12}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"A"===n.key.toUpperCase()})),H((function(){return 5}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"S"===n.key.toUpperCase()})),H((function(){return 6}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"D"===n.key.toUpperCase()})),H((function(){return 7}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"F"===n.key.toUpperCase()})),H((function(){return 8}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"Z"===n.key.toUpperCase()})),H((function(){return 1}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"X"===n.key.toUpperCase()})),H((function(){return 2}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"C"===n.key.toUpperCase()})),H((function(){return 3}))).subscribe((function(n){t(n)})),V(document,"keydown").pipe(X((function(n){return"V"===n.key.toUpperCase()})),H((function(){return 4}))).subscribe((function(n){t(n)}))}(),function(){var n=document.createElement("div");n.classList.add("seq-container"),document.querySelector(".main").appendChild(n);for(var t=0;t<16;t++){var r=document.createElement("div");r.classList.add("seq-pad");var e=document.createElement("div");e.classList.add("step"),e.classList.add((t+1).toString()),t>=0&&t<4&&e.classList.add("first"),t>=4&&t<8&&e.classList.add("second"),t>=8&&t<12&&e.classList.add("third"),t>=12&&t<16&&e.classList.add("fourth"),e.textContent="-",r.appendChild(e);var o=document.createElement("div");o.textContent=(t+1).toString(),r.appendChild(o),n.appendChild(r)}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QzNELEdBQUssR0FBS0EsRUFBSSxJQUFJTCxFQUFLOFAsVUFBVTlMLElBQUksU0FDckMzRCxHQUFLLElBQU1BLEVBQUksSUFBSUwsRUFBSzhQLFVBQVU5TCxJQUFJLFVBQzFDaEUsRUFBSzBRLFlBQWMsSUFDbkJELEVBQUlULFlBQVloUSxHQUVoQixJQUFNbVIsRUFBTXZCLFNBQVNDLGNBQWMsT0FDbkNzQixFQUFJVCxhQUFlclEsRUFBSSxHQUFHMkIsV0FDMUJ5TyxFQUFJVCxZQUFZbUIsR0FFaEJELEVBQWFsQixZQUFZUyxFLENBRTdCLENEekJBVyxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9lcnJvckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbS5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbGlmdC5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXAuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovL3J4anMtdHItODA3Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUludGVybmFscy5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL21hcE9uZU9yTWFueUFyZ3MuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9yeGpzLXRyLTgwNy8uL3NyYy9NUEMudHMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcnhqcy10ci04MDcvLi9zcmMvVFI4MDgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sICovXG5cbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufVxuXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XG4gIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XG4gICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdDtcbiAgfVxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgfVxuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XG4gIGZ1bmN0aW9uIGFjY2VwdChmKSB7IGlmIChmICE9PSB2b2lkIDAgJiYgdHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGV4cGVjdGVkXCIpOyByZXR1cm4gZjsgfVxuICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xuICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcbiAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9ySW4gfHwgKHRhcmdldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSkgOiB7fSk7XG4gIHZhciBfLCBkb25lID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcbiAgICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoZikgeyBpZiAoZG9uZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgaW5pdGlhbGl6ZXJzIGFmdGVyIGRlY29yYXRpb24gaGFzIGNvbXBsZXRlZFwiKTsgZXh0cmFJbml0aWFsaXplcnMucHVzaChhY2NlcHQoZiB8fCBudWxsKSk7IH07XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcbiAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5zZXQpKSBkZXNjcmlwdG9yLnNldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF8gPSBhY2NlcHQocmVzdWx0KSkge1xuICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcbiAgICAgIH1cbiAgfVxuICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XG4gIGRvbmUgPSB0cnVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcnVuSW5pdGlhbGl6ZXJzKHRoaXNBcmcsIGluaXRpYWxpemVycywgdmFsdWUpIHtcbiAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IHVzZVZhbHVlID8gaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZywgdmFsdWUpIDogaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZyk7XG4gIH1cbiAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiID8geCA6IFwiXCIuY29uY2F0KHgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0RnVuY3Rpb25OYW1lKGYsIG5hbWUsIHByZWZpeCkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcbiAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gIH1cbn1cblxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIG9bazJdID0gbVtrXTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcbiAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xuICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgfVxuICB9O1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xuICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gIGlmICghbSkgcmV0dXJuIG87XG4gIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICB0cnkge1xuICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gIH1cbiAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gIGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgIH1cbiAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICB9XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XG4gIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xuICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgcltrXSA9IGFbal07XG4gIHJldHVybiByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xuICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XG4gIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xuICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XG4gIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xuICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hZGREaXNwb3NhYmxlUmVzb3VyY2UoZW52LCB2YWx1ZSwgYXN5bmMpIHtcbiAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkLlwiKTtcbiAgICB2YXIgZGlzcG9zZTtcbiAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNEaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuYXN5bmNEaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKGRpc3Bvc2UgPT09IHZvaWQgMCkge1xuICAgICAgICBpZiAoIVN5bWJvbC5kaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmRpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmRpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBub3QgZGlzcG9zYWJsZS5cIik7XG4gICAgZW52LnN0YWNrLnB1c2goeyB2YWx1ZTogdmFsdWUsIGRpc3Bvc2U6IGRpc3Bvc2UsIGFzeW5jOiBhc3luYyB9KTtcbiAgfVxuICBlbHNlIGlmIChhc3luYykge1xuICAgIGVudi5zdGFjay5wdXNoKHsgYXN5bmM6IHRydWUgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgX1N1cHByZXNzZWRFcnJvciA9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xuICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2Rpc3Bvc2VSZXNvdXJjZXMoZW52KSB7XG4gIGZ1bmN0aW9uIGZhaWwoZSkge1xuICAgIGVudi5lcnJvciA9IGVudi5oYXNFcnJvciA/IG5ldyBfU3VwcHJlc3NlZEVycm9yKGUsIGVudi5lcnJvciwgXCJBbiBlcnJvciB3YXMgc3VwcHJlc3NlZCBkdXJpbmcgZGlzcG9zYWwuXCIpIDogZTtcbiAgICBlbnYuaGFzRXJyb3IgPSB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgd2hpbGUgKGVudi5zdGFjay5sZW5ndGgpIHtcbiAgICAgIHZhciByZWMgPSBlbnYuc3RhY2sucG9wKCk7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjLmRpc3Bvc2UgJiYgcmVjLmRpc3Bvc2UuY2FsbChyZWMudmFsdWUpO1xuICAgICAgICBpZiAocmVjLmFzeW5jKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihuZXh0LCBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IHJldHVybiBuZXh0KCk7IH0pO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICBmYWlsKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW52Lmhhc0Vycm9yKSB0aHJvdyBlbnYuZXJyb3I7XG4gIH1cbiAgcmV0dXJuIG5leHQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBfX2V4dGVuZHMsXG4gIF9fYXNzaWduLFxuICBfX3Jlc3QsXG4gIF9fZGVjb3JhdGUsXG4gIF9fcGFyYW0sXG4gIF9fbWV0YWRhdGEsXG4gIF9fYXdhaXRlcixcbiAgX19nZW5lcmF0b3IsXG4gIF9fY3JlYXRlQmluZGluZyxcbiAgX19leHBvcnRTdGFyLFxuICBfX3ZhbHVlcyxcbiAgX19yZWFkLFxuICBfX3NwcmVhZCxcbiAgX19zcHJlYWRBcnJheXMsXG4gIF9fc3ByZWFkQXJyYXksXG4gIF9fYXdhaXQsXG4gIF9fYXN5bmNHZW5lcmF0b3IsXG4gIF9fYXN5bmNEZWxlZ2F0b3IsXG4gIF9fYXN5bmNWYWx1ZXMsXG4gIF9fbWFrZVRlbXBsYXRlT2JqZWN0LFxuICBfX2ltcG9ydFN0YXIsXG4gIF9faW1wb3J0RGVmYXVsdCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxuICBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZSxcbiAgX19kaXNwb3NlUmVzb3VyY2VzLFxufTtcbiIsImV4cG9ydCB2YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xuICAgICAgICAgICAgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckNsYXNzKGNyZWF0ZUltcGwpIHtcbiAgICB2YXIgX3N1cGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH07XG4gICAgdmFyIGN0b3JGdW5jID0gY3JlYXRlSW1wbChfc3VwZXIpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yRnVuYztcbiAgICByZXR1cm4gY3RvckZ1bmM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJSZW1vdmUuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5LCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgICAgICBpZiAoX3BhcmVudGFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcGFyZW50YWdlXzFfMSAmJiAhX3BhcmVudGFnZV8xXzEuZG9uZSAmJiAoX2EgPSBfcGFyZW50YWdlXzEucmV0dXJuKSkgX2EuY2FsbChfcGFyZW50YWdlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEZpbmFsaXplciA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbEZpbmFsaXplcikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsRmluYWxpemVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZS5lcnJvcnMgOiBbZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgICAgIGlmIChfZmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9maW5hbGl6ZXJzXzEgPSBfX3ZhbHVlcyhfZmluYWxpemVycyksIF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpOyAhX2ZpbmFsaXplcnNfMV8xLmRvbmU7IF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxpemVyID0gX2ZpbmFsaXplcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzXzFfMSAmJiAhX2ZpbmFsaXplcnNfMV8xLmRvbmUgJiYgKF9iID0gX2ZpbmFsaXplcnNfMS5yZXR1cm4pKSBfYi5jYWxsKF9maW5hbGl6ZXJzXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIodGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl9maW5hbGl6ZXJzID0gKF9hID0gdGhpcy5fZmluYWxpemVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIGlmIChfcGFyZW50YWdlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgIF9maW5hbGl6ZXJzICYmIGFyclJlbW92ZShfZmluYWxpemVycywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmaW5hbGl6ZXIpKSB7XG4gICAgICAgIGZpbmFsaXplcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZmluYWxpemVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgdGltZW91dFByb3ZpZGVyID0ge1xuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRUaW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0VGltZW91dC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiZXhwb3J0IHZhciBDT01QTEVURV9OT1RJRklDQVRJT04gPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdDJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpOyB9KSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTm90aWZpY2F0aW9uKGVycm9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHROb3RpZmljYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdOJywgdmFsdWUsIHVuZGVmaW5lZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbnZhciBjb250ZXh0ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvckNvbnRleHQoY2IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgdmFyIGlzUm9vdCA9ICFjb250ZXh0O1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2IoKTtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgdmFyIF9hID0gY29udGV4dCwgZXJyb3JUaHJvd24gPSBfYS5lcnJvclRocm93biwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnIpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgY29udGV4dC5lcnJvciA9IGVycjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckNvbnRleHQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBuZXh0Tm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbiwgQ09NUExFVEVfTk9USUZJQ0FUSU9OIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25GYWN0b3JpZXMnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmltcG9ydCB7IGNhcHR1cmVFcnJvciB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBFTVBUWV9PQlNFUlZFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihlcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVyIH07XG52YXIgX2JpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gX2JpbmQuY2FsbChmbiwgdGhpc0FyZyk7XG59XG52YXIgQ29uc3VtZXJPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5wYXJ0aWFsT2JzZXJ2ZXIgPSBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgfVxuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENvbnN1bWVyT2JzZXJ2ZXI7XG59KCkpO1xudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkgfHwgIW9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgbmV4dDogKG9ic2VydmVyT3JOZXh0ICE9PSBudWxsICYmIG9ic2VydmVyT3JOZXh0ICE9PSB2b2lkIDAgPyBvYnNlcnZlck9yTmV4dCA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUgIT09IG51bGwgJiYgY29tcGxldGUgIT09IHZvaWQgMCA/IGNvbXBsZXRlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzE7XG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiBvYnNlcnZlck9yTmV4dC5uZXh0ICYmIGJpbmQob2JzZXJ2ZXJPck5leHQubmV4dCwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG9ic2VydmVyT3JOZXh0LmVycm9yICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuZXJyb3IsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcik7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuZnVuY3Rpb24gaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgY2FwdHVyZUVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xuICAgIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uICYmIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydCB2YXIgRU1QVFlfT0JTRVJWRVIgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IG5vb3AsXG4gICAgZXJyb3I6IGRlZmF1bHRFcnJvckhhbmRsZXIsXG4gICAgY29tcGxldGU6IG5vb3AsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJleHBvcnQgdmFyIG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIsIFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgb3BlcmF0b3IgPSBfYS5vcGVyYXRvciwgc291cmNlID0gX2Euc291cmNlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3JcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLmNhbGwoc3Vic2NyaWJlciwgc291cmNlKVxuICAgICAgICAgICAgICAgIDogc291cmNlXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU2FmZVN1YnNjcmliZXIoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHJlc29sdmUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5uZXh0KSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSwgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpbm5lckZyb20oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzLnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5TGlrZShhcnJheSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFzeW5jSXRlcmFibGUoYXN5bmNJdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyRnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9pc0Z1bmN0aW9uXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBwcm92aWRlZCBcIiArIChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgaW5wdXQgKyBcIidcIikgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBSZWFkYWJsZVN0cmVhbSwgQXJyYXksIEFzeW5jSXRlcmFibGUsIG9yIEl0ZXJhYmxlLlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93VW5vYnNlcnZhYmxlRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaGFzTGlmdChzb3VyY2UpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UubGlmdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0ZShpbml0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc0xpZnQoc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KGZ1bmN0aW9uIChsaWZ0ZWRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdChsaWZ0ZWRTb3VyY2UsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmFibGUgdG8gbGlmdCB1bmtub3duIE9ic2VydmFibGUgdHlwZScpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWZ0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKSB7XG4gICAgcmV0dXJuIG5ldyBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSk7XG59XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT3BlcmF0b3JTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplLCBzaG91bGRVbnN1YnNjcmliZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub25GaW5hbGl6ZSA9IG9uRmluYWxpemU7XG4gICAgICAgIF90aGlzLnNob3VsZFVuc3Vic2NyaWJlID0gc2hvdWxkVW5zdWJzY3JpYmU7XG4gICAgICAgIF90aGlzLl9uZXh0ID0gb25OZXh0XG4gICAgICAgICAgICA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX25leHQ7XG4gICAgICAgIF90aGlzLl9lcnJvciA9IG9uRXJyb3JcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fZXJyb3I7XG4gICAgICAgIF90aGlzLl9jb21wbGV0ZSA9IG9uQ29tcGxldGVcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT3BlcmF0b3JTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIXRoaXMuc2hvdWxkVW5zdWJzY3JpYmUgfHwgdGhpcy5zaG91bGRVbnN1YnNjcmliZSgpKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VkXzEgPSB0aGlzLmNsb3NlZDtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICFjbG9zZWRfMSAmJiAoKF9hID0gdGhpcy5vbkZpbmFsaXplKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBPcGVyYXRvclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3BlcmF0b3JTdWJzY3JpYmVyLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChwcm9qZWN0LmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4KyspKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCBvbkJlZm9yZU5leHQsIGV4cGFuZCwgaW5uZXJTdWJTY2hlZHVsZXIsIGFkZGl0aW9uYWxGaW5hbGl6ZXIpIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgICAgICBvbkJlZm9yZU5leHQgPT09IG51bGwgfHwgb25CZWZvcmVOZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJlZm9yZU5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWJTY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsRmluYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZGRpdGlvbmFsRmluYWxpemVyKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcIi4uL29wZXJhdG9ycy9tYXBcIjtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNhbGxPckFwcGx5KGZuLCBhcmdzKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkoYXJncykgPyBmbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpIDogZm4oYXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwT25lT3JNYW55QXJncyhmbikge1xuICAgIHJldHVybiBtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGNhbGxPckFwcGx5KGZuLCBhcmdzKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBPbmVPck1hbnlBcmdzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VNYXAnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgbWFwT25lT3JNYW55QXJncyB9IGZyb20gJy4uL3V0aWwvbWFwT25lT3JNYW55QXJncyc7XG52YXIgbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMgPSBbJ2FkZExpc3RlbmVyJywgJ3JlbW92ZUxpc3RlbmVyJ107XG52YXIgZXZlbnRUYXJnZXRNZXRob2RzID0gWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXTtcbnZhciBqcXVlcnlNZXRob2RzID0gWydvbicsICdvZmYnXTtcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXBPbmVPck1hbnlBcmdzKHJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfVxuICAgIHZhciBfYSA9IF9fcmVhZChpc0V2ZW50VGFyZ2V0KHRhcmdldClcbiAgICAgICAgPyBldmVudFRhcmdldE1ldGhvZHMubWFwKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07IH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICA/IG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgOiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgPyBqcXVlcnlNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIDogW10sIDIpLCBhZGQgPSBfYVswXSwgcmVtb3ZlID0gX2FbMV07XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoc3ViVGFyZ2V0KSB7IHJldHVybiBmcm9tRXZlbnQoc3ViVGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpOyB9KShpbm5lckZyb20odGFyZ2V0KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBldmVudCB0YXJnZXQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIubmV4dCgxIDwgYXJncy5sZW5ndGggPyBhcmdzIDogYXJnc1swXSk7XG4gICAgICAgIH07XG4gICAgICAgIGFkZChoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShoYW5kbGVyKTsgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07IH07XG59XG5mdW5jdGlvbiBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkTGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUxpc3RlbmVyKTtcbn1cbmZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0Lm9uKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5vZmYpO1xufVxuZnVuY3Rpb24gaXNFdmVudFRhcmdldCh0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcCIsImltcG9ydCB7IGZpbHRlciwgZm9ya0pvaW4sIGZyb20sIGZyb21FdmVudCwgbWFwLCBtZXJnZU1hcCB9IGZyb20gXCJyeGpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3TVBDKCkge1xuICAvLyBEZWZpbmUgYSBmdW5jdGlvbiB0byBjcmVhdGUgYW4gYXVkaW8gZWxlbWVudCBmb3IgZWFjaCBzb3VuZFxuICBmdW5jdGlvbiBjcmVhdGVBdWRpb0VsZW1lbnQoc291bmRQYXRoOiBzdHJpbmcpOiBIVE1MQXVkaW9FbGVtZW50IHtcbiAgICBjb25zdCBhdWRpbyA9IG5ldyBBdWRpbyhzb3VuZFBhdGgpO1xuICAgIGF1ZGlvLnByZWxvYWQgPSBcImF1dG9cIjtcbiAgICByZXR1cm4gYXVkaW87XG4gIH1cblxuICAvLyBDcmVhdGUgYW4gYXJyYXkgdG8gc3RvcmUgdGhlIGF1ZGlvIGVsZW1lbnRzIGZvciBlYWNoIHNvdW5kXG4gIGNvbnN0IGF1ZGlvRWxlbWVudHM6IHsgaWQ6IG51bWJlcjsgYXVkaW86IEhUTUxBdWRpb0VsZW1lbnQgfVtdID0gW107XG5cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gdG8gcGxheSBhIHNvdW5kIGJ5IElEXG4gIGZ1bmN0aW9uIHBsYXlTb3VuZEJ5SWQoaWQ6IG51bWJlcikge1xuICAgIGNvbnN0IGF1ZGlvID0gYXVkaW9FbGVtZW50cy5maW5kKChlbGVtZW50KSA9PiBlbGVtZW50LmlkID09PSBpZCk/LmF1ZGlvO1xuICAgIGlmIChhdWRpbykge1xuICAgICAgYXVkaW8uY3VycmVudFRpbWUgPSAwO1xuICAgICAgYXVkaW8ucGxheSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENyZWF0ZSBhIDR4MyBncmlkIG9mIGRydW0gcGFkc1xuICBjb25zdCBtcGNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBtcGNDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm1wYy1jb250YWluZXJcIik7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpblwiKS5hcHBlbmRDaGlsZChtcGNDb250YWluZXIpO1xuXG4gIC8vIEZldGNoIGRhdGEgZnJvbSBKU09OIFNlcnZlciBBUElcbiAgY29uc3QgYXBpVXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvc291bmRzXCI7XG4gIGZldGNoKGFwaVVybClcbiAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgLy8gUG9wdWxhdGUgdGhlIGF1ZGlvRWxlbWVudHMgYXJyYXkgd2l0aCBhdWRpbyBlbGVtZW50c1xuICAgICAgYXVkaW9FbGVtZW50cy5wdXNoKFxuICAgICAgICAuLi5kYXRhLm1hcCgoc291bmQ6IGFueSkgPT4gKHtcbiAgICAgICAgICBpZDogc291bmQuaWQsXG4gICAgICAgICAgYXVkaW86IGNyZWF0ZUF1ZGlvRWxlbWVudChgL2Fzc2V0cy9zb3VuZHMvJHtzb3VuZC5zb3VuZFBhdGh9YCksIC8vIFVwZGF0ZSB0aGUgVVJMXG4gICAgICAgIH0pKVxuICAgICAgKTtcblxuICAgICAgLy8gQWRkIGRydW0gcGFkcyB0byB0aGUgZ3JpZFxuICAgICAgZm9yIChjb25zdCBzb3VuZCBvZiBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHBhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHBhZC5jbGFzc0xpc3QuYWRkKFwiZHJ1bS1wYWRcIik7XG4gICAgICAgIHBhZC50ZXh0Q29udGVudCA9IHNvdW5kLm5hbWU7XG4gICAgICAgIHBhZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gcGxheVNvdW5kQnlJZChzb3VuZC5pZCkpO1xuICAgICAgICBtcGNDb250YWluZXIuYXBwZW5kQ2hpbGQocGFkKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBkYXRhIGZyb20gdGhlIHNlcnZlcjpcIiwgZXJyb3IpO1xuICAgIH0pO1xuICBjb25zb2xlLmxvZyhhdWRpb0VsZW1lbnRzKTtcblxuICAvLyBDcmVhdGUgYW4gb2JzZXJ2YWJsZSBmb3IgdGhlIFwiUVwiIGtleSBwcmVzc1xuICBjb25zdCBxS2V5UHJlc3NPYnNlcnZhYmxlID0gZnJvbUV2ZW50PEtleWJvYXJkRXZlbnQ+KFxuICAgIGRvY3VtZW50LFxuICAgIFwia2V5ZG93blwiXG4gICkucGlwZShcbiAgICBmaWx0ZXIoKGV2ZW50KSA9PiBldmVudC5rZXkudG9VcHBlckNhc2UoKSA9PT0gXCJRXCIpLCAvLyBGaWx0ZXIgZm9yIHRoZSBcIlFcIiBrZXlcbiAgICBtYXAoKCkgPT4gOSkgLy8gTWFwIGl0IHRvIHRoZSBJRCBvZiB0aGUgXCJLaWNrXCIgc291bmRcbiAgKTtcblxuICAvLyBTdWJzY3JpYmUgdG8gdGhlIFwiUVwiIGtleSBwcmVzcyBvYnNlcnZhYmxlIGFuZCBwbGF5IHRoZSBcIktpY2tcIiBzb3VuZFxuICBxS2V5UHJlc3NPYnNlcnZhYmxlLnN1YnNjcmliZSgoc291bmRJZCkgPT4ge1xuICAgIHBsYXlTb3VuZEJ5SWQoc291bmRJZCk7XG4gIH0pO1xuXG4gIC8vIENyZWF0ZSBhbiBvYnNlcnZhYmxlIGZvciB0aGUgXCJXXCIga2V5IHByZXNzXG4gIGNvbnN0IHdLZXlQcmVzc09ic2VydmFibGUgPSBmcm9tRXZlbnQ8S2V5Ym9hcmRFdmVudD4oXG4gICAgZG9jdW1lbnQsXG4gICAgXCJrZXlkb3duXCJcbiAgKS5waXBlKFxuICAgIGZpbHRlcigoZXZlbnQpID0+IGV2ZW50LmtleS50b1VwcGVyQ2FzZSgpID09PSBcIldcIiksXG4gICAgbWFwKCgpID0+IDEwKVxuICApO1xuXG4gIHdLZXlQcmVzc09ic2VydmFibGUuc3Vic2NyaWJlKChzb3VuZElkKSA9PiB7XG4gICAgcGxheVNvdW5kQnlJZChzb3VuZElkKTtcbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIGFuIG9ic2VydmFibGUgZm9yIHRoZSBcIkVcIiBrZXkgcHJlc3NcbiAgY29uc3QgZUtleVByZXNzT2JzZXJ2YWJsZSA9IGZyb21FdmVudDxLZXlib2FyZEV2ZW50PihcbiAgICBkb2N1bWVudCxcbiAgICBcImtleWRvd25cIlxuICApLnBpcGUoXG4gICAgZmlsdGVyKChldmVudCkgPT4gZXZlbnQua2V5LnRvVXBwZXJDYXNlKCkgPT09IFwiRVwiKSxcbiAgICBtYXAoKCkgPT4gMTEpXG4gICk7XG5cbiAgZUtleVByZXNzT2JzZXJ2YWJsZS5zdWJzY3JpYmUoKHNvdW5kSWQpID0+IHtcbiAgICBwbGF5U291bmRCeUlkKHNvdW5kSWQpO1xuICB9KTtcblxuICAvLyBDcmVhdGUgYW4gb2JzZXJ2YWJsZSBmb3IgdGhlIFwiUlwiIGtleSBwcmVzc1xuICBjb25zdCByS2V5UHJlc3NPYnNlcnZhYmxlID0gZnJvbUV2ZW50PEtleWJvYXJkRXZlbnQ+KFxuICAgIGRvY3VtZW50LFxuICAgIFwia2V5ZG93blwiXG4gICkucGlwZShcbiAgICBmaWx0ZXIoKGV2ZW50KSA9PiBldmVudC5rZXkudG9VcHBlckNhc2UoKSA9PT0gXCJSXCIpLFxuICAgIG1hcCgoKSA9PiAxMilcbiAgKTtcblxuICByS2V5UHJlc3NPYnNlcnZhYmxlLnN1YnNjcmliZSgoc291bmRJZCkgPT4ge1xuICAgIHBsYXlTb3VuZEJ5SWQoc291bmRJZCk7XG4gIH0pO1xuICAvLyBDcmVhdGUgYW4gb2JzZXJ2YWJsZSBmb3IgdGhlIFwiQVwiIGtleSBwcmVzc1xuICBjb25zdCBhS2V5UHJlc3NPYnNlcnZhYmxlID0gZnJvbUV2ZW50PEtleWJvYXJkRXZlbnQ+KFxuICAgIGRvY3VtZW50LFxuICAgIFwia2V5ZG93blwiXG4gICkucGlwZShcbiAgICBmaWx0ZXIoKGV2ZW50KSA9PiBldmVudC5rZXkudG9VcHBlckNhc2UoKSA9PT0gXCJBXCIpLFxuICAgIG1hcCgoKSA9PiA1KVxuICApO1xuXG4gIGFLZXlQcmVzc09ic2VydmFibGUuc3Vic2NyaWJlKChzb3VuZElkKSA9PiB7XG4gICAgcGxheVNvdW5kQnlJZChzb3VuZElkKTtcbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIGFuIG9ic2VydmFibGUgZm9yIHRoZSBcIlNcIiBrZXkgcHJlc3NcbiAgY29uc3Qgc0tleVByZXNzT2JzZXJ2YWJsZSA9IGZyb21FdmVudDxLZXlib2FyZEV2ZW50PihcbiAgICBkb2N1bWVudCxcbiAgICBcImtleWRvd25cIlxuICApLnBpcGUoXG4gICAgZmlsdGVyKChldmVudCkgPT4gZXZlbnQua2V5LnRvVXBwZXJDYXNlKCkgPT09IFwiU1wiKSxcbiAgICBtYXAoKCkgPT4gNilcbiAgKTtcblxuICBzS2V5UHJlc3NPYnNlcnZhYmxlLnN1YnNjcmliZSgoc291bmRJZCkgPT4ge1xuICAgIHBsYXlTb3VuZEJ5SWQoc291bmRJZCk7XG4gIH0pO1xuICAvLyBDcmVhdGUgYW4gb2JzZXJ2YWJsZSBmb3IgdGhlIFwiRFwiIGtleSBwcmVzc1xuICBjb25zdCBkS2V5UHJlc3NPYnNlcnZhYmxlID0gZnJvbUV2ZW50PEtleWJvYXJkRXZlbnQ+KFxuICAgIGRvY3VtZW50LFxuICAgIFwia2V5ZG93blwiXG4gICkucGlwZShcbiAgICBmaWx0ZXIoKGV2ZW50KSA9PiBldmVudC5rZXkudG9VcHBlckNhc2UoKSA9PT0gXCJEXCIpLFxuICAgIG1hcCgoKSA9PiA3KVxuICApO1xuXG4gIGRLZXlQcmVzc09ic2VydmFibGUuc3Vic2NyaWJlKChzb3VuZElkKSA9PiB7XG4gICAgcGxheVNvdW5kQnlJZChzb3VuZElkKTtcbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIGFuIG9ic2VydmFibGUgZm9yIHRoZSBcImZcIiBrZXkgcHJlc3NcbiAgY29uc3QgZktleVByZXNzT2JzZXJ2YWJsZSA9IGZyb21FdmVudDxLZXlib2FyZEV2ZW50PihcbiAgICBkb2N1bWVudCxcbiAgICBcImtleWRvd25cIlxuICApLnBpcGUoXG4gICAgZmlsdGVyKChldmVudCkgPT4gZXZlbnQua2V5LnRvVXBwZXJDYXNlKCkgPT09IFwiRlwiKSxcbiAgICBtYXAoKCkgPT4gOClcbiAgKTtcblxuICBmS2V5UHJlc3NPYnNlcnZhYmxlLnN1YnNjcmliZSgoc291bmRJZCkgPT4ge1xuICAgIHBsYXlTb3VuZEJ5SWQoc291bmRJZCk7XG4gIH0pO1xuICAvLyBDcmVhdGUgYW4gb2JzZXJ2YWJsZSBmb3IgdGhlIFwiWlwiIGtleSBwcmVzc1xuICBjb25zdCB6S2V5UHJlc3NPYnNlcnZhYmxlID0gZnJvbUV2ZW50PEtleWJvYXJkRXZlbnQ+KFxuICAgIGRvY3VtZW50LFxuICAgIFwia2V5ZG93blwiXG4gICkucGlwZShcbiAgICBmaWx0ZXIoKGV2ZW50KSA9PiBldmVudC5rZXkudG9VcHBlckNhc2UoKSA9PT0gXCJaXCIpLFxuICAgIG1hcCgoKSA9PiAxKVxuICApO1xuXG4gIHpLZXlQcmVzc09ic2VydmFibGUuc3Vic2NyaWJlKChzb3VuZElkKSA9PiB7XG4gICAgcGxheVNvdW5kQnlJZChzb3VuZElkKTtcbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIGFuIG9ic2VydmFibGUgZm9yIHRoZSBcIlhcIiBrZXkgcHJlc3NcbiAgY29uc3QgeEtleVByZXNzT2JzZXJ2YWJsZSA9IGZyb21FdmVudDxLZXlib2FyZEV2ZW50PihcbiAgICBkb2N1bWVudCxcbiAgICBcImtleWRvd25cIlxuICApLnBpcGUoXG4gICAgZmlsdGVyKChldmVudCkgPT4gZXZlbnQua2V5LnRvVXBwZXJDYXNlKCkgPT09IFwiWFwiKSxcbiAgICBtYXAoKCkgPT4gMilcbiAgKTtcblxuICB4S2V5UHJlc3NPYnNlcnZhYmxlLnN1YnNjcmliZSgoc291bmRJZCkgPT4ge1xuICAgIHBsYXlTb3VuZEJ5SWQoc291bmRJZCk7XG4gIH0pO1xuICAvLyBDcmVhdGUgYW4gb2JzZXJ2YWJsZSBmb3IgdGhlIFwiQ1wiIGtleSBwcmVzc1xuICBjb25zdCBjS2V5UHJlc3NPYnNlcnZhYmxlID0gZnJvbUV2ZW50PEtleWJvYXJkRXZlbnQ+KFxuICAgIGRvY3VtZW50LFxuICAgIFwia2V5ZG93blwiXG4gICkucGlwZShcbiAgICBmaWx0ZXIoKGV2ZW50KSA9PiBldmVudC5rZXkudG9VcHBlckNhc2UoKSA9PT0gXCJDXCIpLFxuICAgIG1hcCgoKSA9PiAzKVxuICApO1xuXG4gIGNLZXlQcmVzc09ic2VydmFibGUuc3Vic2NyaWJlKChzb3VuZElkKSA9PiB7XG4gICAgcGxheVNvdW5kQnlJZChzb3VuZElkKTtcbiAgfSk7XG4gIC8vIENyZWF0ZSBhbiBvYnNlcnZhYmxlIGZvciB0aGUgXCJWXCIga2V5IHByZXNzXG4gIGNvbnN0IHZLZXlQcmVzc09ic2VydmFibGUgPSBmcm9tRXZlbnQ8S2V5Ym9hcmRFdmVudD4oXG4gICAgZG9jdW1lbnQsXG4gICAgXCJrZXlkb3duXCJcbiAgKS5waXBlKFxuICAgIGZpbHRlcigoZXZlbnQpID0+IGV2ZW50LmtleS50b1VwcGVyQ2FzZSgpID09PSBcIlZcIiksXG4gICAgbWFwKCgpID0+IDQpXG4gICk7XG5cbiAgdktleVByZXNzT2JzZXJ2YWJsZS5zdWJzY3JpYmUoKHNvdW5kSWQpID0+IHtcbiAgICBwbGF5U291bmRCeUlkKHNvdW5kSWQpO1xuICB9KTtcbn1cblxuLy8gY29uc3QgZHJ1bVBhZExhYmVscyA9IFtcbi8vICAgXCJLaWNrXCIsXG4vLyAgIFwiQ2xvc2VkaGF0XCIsXG4vLyAgIFwiT3BlbmhhdDFcIixcbi8vICAgXCJPcGVuaGF0MlwiLFxuLy8gICBcIlJpbXNob3RcIixcbi8vICAgXCJTbmFyZTFcIixcbi8vICAgXCJTbmFyZTJcIixcbi8vICAgXCJDbGFwXCIsXG4vLyAgIFwiTG93VG9tXCIsXG4vLyAgIFwiTWlkVG9tXCIsXG4vLyAgIFwiSGlUb21cIixcbi8vICAgXCJDb3diZWxsXCIsXG4vLyBdO1xuXG4vLyBmdW5jdGlvbiBjcmVhdGVEcnVtUGFkKGxhYmVsOiBzdHJpbmcpOiBIVE1MRGl2RWxlbWVudCB7XG4vLyAgIGNvbnN0IHBhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4vLyAgIHBhZC5jbGFzc0xpc3QuYWRkKFwiZHJ1bS1wYWRcIik7XG4vLyAgIHBhZC50ZXh0Q29udGVudCA9IGxhYmVsO1xuLy8gICBwYWQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHBsYXlTb3VuZChsYWJlbCkpO1xuLy8gICByZXR1cm4gcGFkO1xuLy8gfVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gZHJhd01QQygpIHtcbi8vICAgY29uc3QgbXBjQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5NUENcIik7XG4vLyAgIGlmIChtcGNDb250YWluZXIpIHtcbi8vICAgICBkcnVtUGFkTGFiZWxzLmZvckVhY2goKGxhYmVsKSA9PiB7XG4vLyAgICAgICBjb25zdCBwYWQgPSBjcmVhdGVEcnVtUGFkKGxhYmVsKTtcbi8vICAgICAgIG1wY0NvbnRhaW5lci5hcHBlbmRDaGlsZChwYWQpO1xuLy8gICAgIH0pO1xuLy8gICB9XG4vLyB9XG5cbi8vIGNvbnN0IHpLZXkkID0gZnJvbUV2ZW50KGRvY3VtZW50LCBcImtleWRvd25cIikucGlwZShcbi8vICAgZmlsdGVyKChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gZXZlbnQua2V5ID09PSBcInpcIiksXG4vLyAgIG1hcCgoKSA9PiBraWNrU291bmQpXG4vLyApO1xuIiwiaW1wb3J0IHsgZHJhd01QQyB9IGZyb20gXCIuL01QQ1wiO1xuaW1wb3J0IHsgZHJhd1NlcXVlbmNlciB9IGZyb20gXCIuL1RSODA4XCI7XG5cbmRyYXdNUEMoKTtcbmRyYXdTZXF1ZW5jZXIoKTtcbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZHJhd1NlcXVlbmNlcigpIHtcbiAgLy8gQ3JlYXRlIGEgMXgxNiBncmlkIG9mIGRydW0gcGFkc1xuICBjb25zdCBzZXFDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBzZXFDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInNlcS1jb250YWluZXJcIik7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpblwiKS5hcHBlbmRDaGlsZChzZXFDb250YWluZXIpO1xuXG4gIC8vIENyZWF0ZSB0aGUgc2VxdWVuY2VyIHN0ZXBzXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgIGNvbnN0IHBhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcGFkLmNsYXNzTGlzdC5hZGQoXCJzZXEtcGFkXCIpO1xuXG4gICAgY29uc3Qgc3RlcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgc3RlcC5jbGFzc0xpc3QuYWRkKFwic3RlcFwiKTtcbiAgICBzdGVwLmNsYXNzTGlzdC5hZGQoKGkgKyAxKS50b1N0cmluZygpKTtcbiAgICBpZiAoaSA+PSAwICYmIGkgPCA0KSBzdGVwLmNsYXNzTGlzdC5hZGQoXCJmaXJzdFwiKTtcbiAgICBpZiAoaSA+PSA0ICYmIGkgPCA4KSBzdGVwLmNsYXNzTGlzdC5hZGQoXCJzZWNvbmRcIik7XG4gICAgaWYgKGkgPj0gOCAmJiBpIDwgMTIpIHN0ZXAuY2xhc3NMaXN0LmFkZChcInRoaXJkXCIpO1xuICAgIGlmIChpID49IDEyICYmIGkgPCAxNikgc3RlcC5jbGFzc0xpc3QuYWRkKFwiZm91cnRoXCIpO1xuICAgIHN0ZXAudGV4dENvbnRlbnQgPSBcIi1cIjtcbiAgICBwYWQuYXBwZW5kQ2hpbGQoc3RlcCk7XG5cbiAgICBjb25zdCBudW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG51bS50ZXh0Q29udGVudCA9IChpICsgMSkudG9TdHJpbmcoKTtcbiAgICBwYWQuYXBwZW5kQ2hpbGQobnVtKTtcblxuICAgIHNlcUNvbnRhaW5lci5hcHBlbmRDaGlsZChwYWQpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiZXh0ZW5kU3RhdGljcyIsImQiLCJiIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfX2V4dGVuZHMiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9fZ2VuZXJhdG9yIiwidGhpc0FyZyIsImJvZHkiLCJmIiwieSIsInQiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJuZXh0IiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibiIsInYiLCJvcCIsImRvbmUiLCJ2YWx1ZSIsInBvcCIsImxlbmd0aCIsInB1c2giLCJlIiwic3RlcCIsIl9fdmFsdWVzIiwibyIsInMiLCJtIiwiaSIsIl9fcmVhZCIsInIiLCJhciIsImVycm9yIiwiX19zcHJlYWRBcnJheSIsInRvIiwiZnJvbSIsInBhY2siLCJhcmd1bWVudHMiLCJsIiwic2xpY2UiLCJjb25jYXQiLCJfX2F3YWl0IiwiU3VwcHJlc3NlZEVycm9yIiwiaXNBcnJheUxpa2UiLCJ4IiwiaXNGdW5jdGlvbiIsImN0b3JGdW5jIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsImVycm9ycyIsImluc3RhbmNlIiwiRXJyb3IiLCJzdGFjayIsIm1lc3NhZ2UiLCJtYXAiLCJlcnIiLCJ0b1N0cmluZyIsImpvaW4iLCJuYW1lIiwiYXJyUmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIlN1YnNjcmlwdGlvbiIsImluaXRpYWxUZWFyZG93biIsImNsb3NlZCIsIl9wYXJlbnRhZ2UiLCJfZmluYWxpemVycyIsImVtcHR5IiwidW5zdWJzY3JpYmUiLCJlXzEiLCJfYSIsImVfMiIsIl9iIiwiaXNBcnJheSIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwicmVtb3ZlIiwiZV8xXzEiLCJyZXR1cm4iLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnNfMSIsIl9maW5hbGl6ZXJzXzFfMSIsImZpbmFsaXplciIsImV4ZWNGaW5hbGl6ZXIiLCJlXzJfMSIsImFkZCIsInRlYXJkb3duIiwiX2hhc1BhcmVudCIsIl9hZGRQYXJlbnQiLCJwYXJlbnQiLCJpbmNsdWRlcyIsIl9yZW1vdmVQYXJlbnQiLCJFTVBUWSIsImlzU3Vic2NyaXB0aW9uIiwiY29uZmlnIiwib25VbmhhbmRsZWRFcnJvciIsIm9uU3RvcHBlZE5vdGlmaWNhdGlvbiIsIlByb21pc2UiLCJ1bmRlZmluZWQiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImhhbmRsZXIiLCJ0aW1lb3V0IiwiYXJncyIsIl9pIiwiZGVsZWdhdGUiLCJhcHBseSIsImNsZWFyVGltZW91dCIsImhhbmRsZSIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImtpbmQiLCJjb250ZXh0IiwiU3Vic2NyaWJlciIsIl9zdXBlciIsImRlc3RpbmF0aW9uIiwiX3RoaXMiLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJGdW5jdGlvbiIsImJpbmQiLCJmbiIsIkNvbnN1bWVyT2JzZXJ2ZXIiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJoYW5kbGVVbmhhbmRsZWRFcnJvciIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwiZXJyb3JUaHJvd24iLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJpc09ic2VydmVyIiwiY2IiLCJpc1Jvb3QiLCJlcnJvckNvbnRleHQiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJvcGVyYXRpb25zIiwiZm5zIiwiaW5wdXQiLCJyZWR1Y2UiLCJwcmV2IiwidG9Qcm9taXNlIiwiaW5uZXJGcm9tIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsIm9iaiIsIm9icyIsImFycmF5IiwidGhlbiIsInByb21pc2UiLCJhc3luY0l0ZXJhdG9yIiwiaXNBc3luY0l0ZXJhYmxlIiwiZnJvbUFzeW5jSXRlcmFibGUiLCJpc0l0ZXJhYmxlIiwiaXRlcmFibGUiLCJpdGVyYWJsZV8xIiwiaXRlcmFibGVfMV8xIiwiZ2V0UmVhZGVyIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJyZWFkYWJsZVN0cmVhbSIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJxIiwiYSIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJzaGlmdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJyZWFkZXIiLCJyZWFkIiwicmVsZWFzZUxvY2siLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwiY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IiLCJhc3luY0l0ZXJhYmxlIiwiYXN5bmNJdGVyYWJsZV8xIiwiYXN5bmNJdGVyYWJsZV8xXzEiLCJQIiwiX19hc3luY1ZhbHVlcyIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzdWx0IiwicHJvY2VzcyIsImNhdGNoIiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwic2hvdWxkVW5zdWJzY3JpYmUiLCJjbG9zZWRfMSIsInByb2plY3QiLCJtZXJnZU1hcCIsInJlc3VsdFNlbGVjdG9yIiwiY29uY3VycmVudCIsIkluZmluaXR5IiwiaWkiLCJvbkJlZm9yZU5leHQiLCJleHBhbmQiLCJpbm5lclN1YlNjaGVkdWxlciIsImFkZGl0aW9uYWxGaW5hbGl6ZXIiLCJidWZmZXIiLCJhY3RpdmUiLCJpc0NvbXBsZXRlIiwiY2hlY2tDb21wbGV0ZSIsIm91dGVyTmV4dCIsImRvSW5uZXJTdWIiLCJpbm5lckNvbXBsZXRlIiwiaW5uZXJWYWx1ZSIsIl9sb29wXzEiLCJidWZmZXJlZFZhbHVlIiwibWVyZ2VJbnRlcm5hbHMiLCJub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyIsImV2ZW50VGFyZ2V0TWV0aG9kcyIsImpxdWVyeU1ldGhvZHMiLCJmcm9tRXZlbnQiLCJ0YXJnZXQiLCJldmVudE5hbWUiLCJvcHRpb25zIiwiY2FsbE9yQXBwbHkiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRXZlbnRUYXJnZXQiLCJtZXRob2ROYW1lIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyIiwidG9Db21tb25IYW5kbGVyUmVnaXN0cnkiLCJvbiIsIm9mZiIsImlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIiLCJzdWJUYXJnZXQiLCJmaWx0ZXIiLCJwcmVkaWNhdGUiLCJhdWRpb0VsZW1lbnRzIiwicGxheVNvdW5kQnlJZCIsImlkIiwiYXVkaW8iLCJmaW5kIiwiZWxlbWVudCIsImN1cnJlbnRUaW1lIiwicGxheSIsIm1wY0NvbnRhaW5lciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsImZldGNoIiwicmVzcG9uc2UiLCJqc29uIiwiZGF0YSIsInNvdW5kIiwic291bmRQYXRoIiwiQXVkaW8iLCJwcmVsb2FkIiwicGFkIiwidGV4dENvbnRlbnQiLCJjb25zb2xlIiwibG9nIiwiZXZlbnQiLCJrZXkiLCJ0b1VwcGVyQ2FzZSIsInNvdW5kSWQiLCJkcmF3TVBDIiwic2VxQ29udGFpbmVyIiwibnVtIiwiZHJhd1NlcXVlbmNlciJdLCJzb3VyY2VSb290IjoiIn0=